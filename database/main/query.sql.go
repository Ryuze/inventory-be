// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countInventoryItems = `-- name: CountInventoryItems :one
select 
    count(*)
from 
    items
where
    items.category_id like $1
and
    items.location_id like $2
`

type CountInventoryItemsParams struct {
	CategoryID pgtype.Text
	LocationID pgtype.Text
}

func (q *Queries) CountInventoryItems(ctx context.Context, arg CountInventoryItemsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countInventoryItems, arg.CategoryID, arg.LocationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const fetchInventoryItems = `-- name: FetchInventoryItems :many
select 
    items.id,
    items.name,
    items.qty,
    items.global_item_id,
    items.category_id,
    items.location_id,
    items.position_id
from 
    items
where
    items.category_id like $1
and
    items.location_id like $2
order by 
    items.name
desc
limit $3
offset $4
`

type FetchInventoryItemsParams struct {
	CategoryID pgtype.Text
	LocationID pgtype.Text
	Limit      int32
	Offset     int32
}

type FetchInventoryItemsRow struct {
	ID           string
	Name         string
	Qty          int32
	GlobalItemID pgtype.Text
	CategoryID   pgtype.Text
	LocationID   pgtype.Text
	PositionID   pgtype.Text
}

func (q *Queries) FetchInventoryItems(ctx context.Context, arg FetchInventoryItemsParams) ([]FetchInventoryItemsRow, error) {
	rows, err := q.db.Query(ctx, fetchInventoryItems,
		arg.CategoryID,
		arg.LocationID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchInventoryItemsRow
	for rows.Next() {
		var i FetchInventoryItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Qty,
			&i.GlobalItemID,
			&i.CategoryID,
			&i.LocationID,
			&i.PositionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
